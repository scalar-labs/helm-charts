# Default values for scalardb-analytics-postgresql.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# -- String to partially override scalardb-analytics-postgresql.fullname template (will maintain the release name)
nameOverride: ""
# -- String to fully override scalardb-analytics-postgresql.fullname template
fullnameOverride: ""

scalardbAnalyticsPostgreSQL:
  # -- Default values for number of replicas.
  replicaCount: 3

  postgresql:
    # -- The database name that you create in PostgreSQL. Schema Importer creates some objects such as a view of ScalarDB Analytics with PostgreSQL in this database.
    databaseName: scalardb
    # -- The secret resource name that includes superuser password for PostgreSQL.
    secretName: scalardb-analytics-postgresql-superuser-password

  # --  The database.properties to access the underlying databases that Schema Importer will load schemas into PostgreSQL.
  # @default -- The minimum template of database.properties is set by default.
  databaseProperties: |
    # Comma-separated contact points. For DynamoDB, the region is specified by this parameter.
    scalar.db.contact_points=${env:SCALAR_DB_CONTACT_POINTS:-}

    # Port number for all the contact points. Default port number for each database is used if empty.
    scalar.db.contact_port=${env:SCALAR_DB_CONTACT_PORT:-}

    # Credential information to access the database. For Cosmos DB, username isn't used. For DynamoDB, AWS_ACCESS_KEY_ID is specified by the username and AWS_ACCESS_SECRET_KEY is specified by the password.
    scalar.db.username=${env:SCALAR_DB_USERNAME:-}
    scalar.db.password=${env:SCALAR_DB_PASSWORD:-}

    # Storage implementation. "cassandra" or "cosmos" or "dynamo" or "jdbc" or "grpc" can be set. Default storage is "cassandra".
    scalar.db.storage=${env:SCALAR_DB_STORAGE:-}

  # -- Secret name that includes sensitive data such as credentials. Each secret key is passed to a pod as environment variables by using envFrom.
  secretName: ""

  image:
    # -- Docker image repository of ScalarDB Analytics with PostgreSQL.
    repository: ghcr.io/scalar-labs/scalardb-analytics-postgresql
    # -- Specify an image-pulling policy.
    pullPolicy: IfNotPresent
    # -- Override the image tag with a default that is the chart appVersion.
    tag: ""

  # -- Optionally specify an array of imagePullSecrets. Secrets must be manually created in the namespace.
  imagePullSecrets: [name: reg-docker-secrets]

  strategy:
    rollingUpdate:
      # -- The number of pods that can be created above the desired amount of pods during an update.
      maxSurge: 25%
      # -- The number of pods that can be unavailable during the update process.
      maxUnavailable: 25%
    # -- New pods are added gradually, and old pods are terminated gradually, e.g: Recreate or RollingUpdate
    type: RollingUpdate

  service:
    # -- Service types in kubernetes
    type: ClusterIP
    # -- Service annotations, e.g: prometheus, etc.
    annotations: {}
    ports:
      postgresql:
        # -- PostgreSQL public port
        port: 5432
        # -- PostgreSQL k8s internal port
        targetPort: 5432
        # -- PostgreSQL protocol
        protocol: TCP

  # -- PodSecurityContext holds pod-level security attributes and common container settings.
  podSecurityContext:
    # -- For ScalarDB Analytics with PostgreSQL to work properly, you must set "podSecurityContext.fsGroup" to "201".
    fsGroup: 201
    seccompProfile:
      type: RuntimeDefault

  # -- Setting security context at the pod applies those settings to all containers in the pod.
  securityContext:
    # -- Capabilities (specifically, Linux capabilities), are used for permission management in Linux. Some capabilities are enabled by default.
    capabilities:
      drop:
        - ALL
    # -- Containers should be run as a non-root user with the minimum required permissions (principle of least privilege).
    runAsNonRoot: true
    # -- The official PostgreSQL image uses the "postgres (UID=999)" user by default.
    runAsUser: 999
    # -- AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process.
    allowPrivilegeEscalation: false

  # -- Pod annotations for the scalardb-analytics-postgresql deployment.
  podAnnotations: {}

  # -- Resources allowed to the pod.
  resources:
    {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  # -- nodeSelector is a form of node selection constraint.
  nodeSelector: {}

  # -- Tolerations are applied to pods and allow (but do not require) the pods to schedule onto nodes with matching taints.
  tolerations: []

  # -- The affinity/anti-affinity feature greatly expands the types of constraints you can express.
  affinity: {}

  # -- Defines additional volumes.
  # If you want to mount a volume for PGDATA, you can mount extra volumes.
  extraVolumes: []
  # - name: pgdata
  #   emptyDir: {}

  # -- Defines additional volume mounts.
  extraVolumeMounts: []
  # - name: pgdata
  #   mountPath: /var/lib/postgresql/data

  serviceAccount:
    # -- Name of the existing service account resource.
    serviceAccountName: ""
    # -- Specify whether to mount a service account token or not.
    automountServiceAccountToken: false

schemaImporter:
  image:
    # -- Docker image repository of Schema Importer.
    repository: ghcr.io/scalar-labs/scalardb-analytics-postgresql-schema-importer
    # -- Specify an image-pulling policy.
    pullPolicy: IfNotPresent
    # -- Override the image tag with a default that is the chart appVersion
    tag: ""

  # -- Namespace list that includes tables you want to read via ScalarDB Analytics with PostgreSQL.
  namespaces: []

  # -- Setting security context at the pod applies those settings to all containers in the pod.
  securityContext:
    # -- Capabilities (specifically, Linux capabilities), are used for permission management in Linux. Some capabilities are enabled by default.
    capabilities:
      drop:
        - ALL
    # -- Containers should be run as a non-root user with the minimum required permissions (principle of least privilege).
    runAsNonRoot: true
    # -- AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process.
    allowPrivilegeEscalation: false

  entrypointShell:
    # -- Maximum retry count of Schema Importer in entrypoint.sh.
    maxRetryCount: 10
    # -- Retry interval of Schema Importer in entrypoint.sh.
    retryInterval: 3
