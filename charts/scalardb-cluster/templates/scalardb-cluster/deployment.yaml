apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "scalardb-cluster.fullname" . }}-node
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "scalardb-cluster.labels" . | nindent 4 }}
spec:
  minReadySeconds: 0
  replicas: {{ .Values.scalardbCluster.replicaCount }}
  selector:
    matchLabels:
      {{- include "scalardb-cluster.selectorLabels" . | nindent 6 }}
  {{- with .Values.scalardbCluster.strategy }}
  strategy:
    {{- toYaml . | nindent 4 }}
  {{- end }}
  template:
    metadata:
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/scalardb-cluster/configmap.yaml") . | sha256sum }}
        {{- if .Values.scalardbCluster.podAnnotations }}
        {{- toYaml .Values.scalardbCluster.podAnnotations | nindent 8 }}
        {{- end }}
      labels:
        {{- include "scalardb-cluster.selectorLabels" . | nindent 8 }}
        {{- if eq .Values.global.platform "azure" }}
        azure-extensions-usage-release-identifier: {{ .Release.Name }}
        {{- end }}
    spec:
      restartPolicy: Always
      serviceAccountName: {{ include "scalardb-cluster.serviceAccountName" . }}
      automountServiceAccountToken: {{ .Values.scalardbCluster.serviceAccount.automountServiceAccountToken }}
      terminationGracePeriodSeconds: 90
      {{- with .Values.scalardbCluster.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      securityContext:
        {{- toYaml .Values.scalardbCluster.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}-node
          securityContext:
            {{- toYaml .Values.scalardbCluster.securityContext | nindent 12 }}
          {{- if eq .Values.global.platform "azure" }}
          image: "{{ .Values.global.azure.images.scalardbCluster.registry }}/{{ .Values.global.azure.images.scalardbCluster.image }}:{{ .Values.global.azure.images.scalardbCluster.tag }}"
          {{- else }}
          image: "{{ .Values.scalardbCluster.image.repository }}:{{ .Values.scalardbCluster.image.tag | default .Chart.AppVersion }}"
          {{- end }}
          imagePullPolicy: {{ .Values.scalardbCluster.image.pullPolicy }}
          ports:
            - containerPort: 60053
            - containerPort: 8080
            - containerPort: 9080
          env:
          - name: SCALAR_DB_CLUSTER_MEMBERSHIP_KUBERNETES_ENDPOINT_NAMESPACE_NAME
            value: {{ .Release.Namespace }}
          {{- if .Values.envoy.enabled }}
          - name: SCALAR_DB_CLUSTER_MEMBERSHIP_KUBERNETES_ENDPOINT_NAME
            value: {{ include "scalardb-cluster.fullname" . }}-headless
          {{- else }}
          - name: SCALAR_DB_CLUSTER_MEMBERSHIP_KUBERNETES_ENDPOINT_NAME
            value: {{ include "scalardb-cluster.fullname" . }}
          {{- end }}
          - name: SCALAR_DB_CLUSTER_LOG_LEVEL
            value: "{{ .Values.scalardbCluster.logLevel }}"
          {{- if and (.Values.scalardbCluster.encryption.enabled) (eq .Values.scalardbCluster.encryption.type "self") }}
          - name: SCALAR_DB_CLUSTER_ENCRYPTION_SELF_KUBERNETES_SECRET_NAMESPACE_NAME
            value: {{ .Release.Namespace }}
          {{- end }}
          {{- if .Values.scalardbCluster.secretName }}
          envFrom:
          - secretRef:
              name: "{{ .Values.scalardbCluster.secretName }}"
          {{- end }}
          resources:
            {{- toYaml .Values.scalardbCluster.resources | nindent 12 }}
          startupProbe:
            exec:
              command:
                - /usr/local/bin/grpc_health_probe
                - -addr=localhost:60053
                {{- if .Values.scalardbCluster.tls.enabled }}
                - -tls
                - -tls-ca-cert=/tls/scalardb-cluster/certs/ca.crt
                {{- if .Values.scalardbCluster.tls.overrideAuthority }}
                - -tls-server-name={{ .Values.scalardbCluster.tls.overrideAuthority }}
                {{- end }}
                {{- end }}
            failureThreshold: 60
            periodSeconds: 5
          livenessProbe:
            exec:
              command:
                - /usr/local/bin/grpc_health_probe
                - -addr=localhost:60053
                {{- if .Values.scalardbCluster.tls.enabled }}
                - -tls
                - -tls-ca-cert=/tls/scalardb-cluster/certs/ca.crt
                {{- if .Values.scalardbCluster.tls.overrideAuthority }}
                - -tls-server-name={{ .Values.scalardbCluster.tls.overrideAuthority }}
                {{- end }}
                {{- end }}
            failureThreshold: 3
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          volumeMounts:
            - name: scalardb-cluster-database-properties-volume
              mountPath: /scalardb-cluster/node/scalardb-cluster-node.properties
              subPath: scalardb-cluster-node.properties
            {{- if .Values.scalardbCluster.tls.enabled }}
            - name: scalardb-cluster-tls-volume
              mountPath: /tls/scalardb-cluster/certs
            {{- end }}
            {{- if and (.Values.scalardbCluster.encryption.enabled) (eq .Values.scalardbCluster.encryption.type "vault") (.Values.scalardbCluster.encryption.vault.tls.enabled) }}
            - name: scalardb-cluster-encryption-vault-tls-volume
              mountPath: /encryption/vault/tls/certs
            {{- end }}
          {{- with .Values.scalardbCluster.extraVolumeMounts }}
            {{- toYaml . | nindent 12 }}
          {{- end }}
      volumes:
        - name: scalardb-cluster-database-properties-volume
          configMap:
            name: {{ include "scalardb-cluster.fullname" . }}-node-properties
        {{- if and .Values.scalardbCluster.tls.enabled .Values.scalardbCluster.tls.certManager.enabled }}
        - name: scalardb-cluster-tls-volume
          secret:
            secretName: {{ include "scalardb-cluster.fullname" . }}-tls-cert
        {{- end }}
        {{- if and (.Values.scalardbCluster.tls.enabled) (not .Values.scalardbCluster.tls.certManager.enabled) }}
        - name: scalardb-cluster-tls-volume
          projected:
            sources:
              - secret:
                  name: {{ .Values.scalardbCluster.tls.caRootCertSecret }}
              - secret:
                  name: {{ .Values.scalardbCluster.tls.certChainSecret }}
              - secret:
                  name: {{ .Values.scalardbCluster.tls.privateKeySecret }}
        {{- end }}
        {{- if and (.Values.scalardbCluster.encryption.enabled) (eq .Values.scalardbCluster.encryption.type "vault") (.Values.scalardbCluster.encryption.vault.tls.enabled) }}
        - name: scalardb-cluster-encryption-vault-tls-volume
          secret:
            secretName: {{ .Values.scalardbCluster.encryption.vault.tls.caRootCertSecret }}
        {{- end }}
      {{- with .Values.scalardbCluster.extraVolumes }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.scalardbCluster.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.scalardbCluster.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.scalardbCluster.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
