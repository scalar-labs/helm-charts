# Default values for scalardl.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# -- String to partially override scalardl.fullname template (will maintain the release name)
nameOverride: ""

# -- String to fully override scalardl.fullname template
fullnameOverride: ""

envoy:
  # -- enable envoy
  enabled: true
  # -- String to partially override envoy.fullname template
  nameOverride: "scalardl"

  envoyConfiguration:
    # -- list of service name and port
    serviceListeners: scalardl-service:50051,scalardl-privileged:50052

  image:
    # -- Docker tag
    version: 1.5.0

  service:
    # -- service types in kubernetes
    type: ClusterIP
    # -- Service annotations, e.g: prometheus, etc.
    annotations: {}
    ports:
      envoy:
        # -- envoy public port
        port: 50051
        # -- envoy k8s internal name
        targetPort: 50051
        # -- envoy protocol
        protocol: TCP
      envoy-priv:
        # -- nvoy public port
        port: 50052
        # -- envoy k8s internal name
        targetPort: 50052
        # -- envoy protocol
        protocol: TCP

ledger:
  # -- number of replicas to deploy
  replicaCount: 3

  scalarLedgerConfiguration:
    # -- The contact points of the database such as hostnames or URLs
    dbContactPoints: cassandra
    # -- The port number of the contact points
    dbContactPort: 9042
    # -- The username of the database
    dbUsername: cassandra
    # -- The password of the database
    dbPassword: cassandra
    # -- The storage of the database: cassandra or cosmos
    dbStorage: cassandra
    # -- The log level of Scalar ledger
    ledgerLogLevel: INFO
    # ledger.scalarLedgerConfiguration.ledgerProofEnabled -- Whether or not Asset Proof is enabled
    ledgerProofEnabled: false
    # ledger.scalarLedgerConfiguration.ledgerAuditorEnabled -- Whether or not Auditor is enabled
    ledgerAuditorEnabled: false
    # -- The name of a Ledger secret
    secretName: ledger-keys
    # -- The secret key of a Ledger private key
    ledgerPrivateKeySecretKey: private-key

  # -- The ledger.properties is created based on the values of ledger.scalarLedgerConfiguration by default. If you want to customize ledger.properties, you can override this value with your ledger.properties.
  # @default -- The default minimum necessary values of ledger.properties are set. You can overwrite it with your own ledger.properties.
  ledgerProperties: |
    # Comma separated contact points
    # The value of ledger.scalarLedgerConfiguration.dbContactPoints is set by default.
    scalar.db.contact_points={{ default .Env.HELM_SCALAR_DB_CONTACT_POINTS "" }}

    # Port number for all the contact points. Default port number for each database is used if empty.
    # The value of ledger.scalarLedgerConfiguration.dbContactPort is set by default.
    scalar.db.contact_port={{ default .Env.HELM_SCALAR_DB_CONTACT_PORT "" }}

    # Credential information to access the database
    # The value of ledger.scalarLedgerConfiguration.dbUsername is set by default.
    scalar.db.username={{ default .Env.HELM_SCALAR_DB_USERNAME "" }}
    # The value of ledger.scalarLedgerConfiguration.dbPassword is set by default.
    scalar.db.password={{ default .Env.HELM_SCALAR_DB_PASSWORD "" }}

    # Storage implementation. Either cassandra or cosmos can be set.
    # The value of ledger.scalarLedgerConfiguration.dbStorage is set by default.
    scalar.db.storage={{ default .Env.HELM_SCALAR_DB_STORAGE "" }}

    # A flag to enable asset proof that is used to verify assets.
    # This feature must be enabled in both client and server.
    # The value of ledger.scalarLedgerConfiguration.ledgerProofEnabled is set by default.
    scalar.dl.ledger.proof.enabled={{ default .Env.HELM_SCALAR_DL_LEDGER_PROOF_ENABLED "" }}

    # A flag to use Auditor.
    # The value of ledger.scalarLedgerConfiguration.ledgerAuditorEnabled is set by default.
    scalar.dl.ledger.auditor.enabled={{ default .Env.HELM_SCALAR_DL_LEDGER_AUDITOR_ENABLED "" }}

    # Private key file used for signing a proof entry.
    # The value "/keys/ledger.scalarLedgerConfiguration.ledgerPrivateKeySecretKey" is set by default.
    scalar.dl.ledger.proof.private_key_path={{ default .Env.HELM_SCALAR_DL_LEDGER_PROOF_PRIVATE_KEY_PATH "" }}

  # -- Secret name that includes sensitive data such as credentials. Each secret key is passed to Pod as environment variables using envFrom.
  secretName: ""

  image:
    # -- Docker image
    repository: ghcr.io/scalar-labs/scalar-ledger
    # -- Docker tag
    version: 3.9.0
    # -- Specify a imagePullPolicy
    pullPolicy: IfNotPresent

  # -- Optionally specify an array of imagePullSecrets. Secrets must be manually created in the namespace.
  imagePullSecrets: [name: reg-docker-secrets]

  strategy:
    rollingUpdate:
      # -- The number of pods that can be created above the desired amount of pods during an update
      maxSurge: 25%
      # -- The number of pods that can be unavailable during the update process
      maxUnavailable: 25%
    # -- New pods are added gradually, and old pods are terminated gradually, e.g: Recreate or RollingUpdate
    type: RollingUpdate

  # -- PodSecurityContext holds pod-level security attributes and common container settings
  podSecurityContext:
    seccompProfile:
      type: RuntimeDefault

  # -- Setting security context at the pod applies those settings to all containers in the pod
  securityContext:
    capabilities:
      drop:
      - ALL
    runAsNonRoot: true
    allowPrivilegeEscalation: false

  # -- Defines additional volumes.
  extraVolumes: []
  # If you set "scalar.dl.ledger.proof.enabled=true" to ledger.ledgerProperties,
  # you need to create volume that includes key file.
  # - name: ledger-keys
  #   secret:
  #     secretName: ledger-keys

  # -- Defines additional volume mounts.
  extraVolumeMounts: []
  # If you set "scalar.dl.ledger.proof.enabled=true" to ledger.ledgerProperties,
  # you need to mount key file to the path set in the "scalar.dl.ledger.proof.private_key_path".
  # - name: ledger-keys
  #   mountPath: /keys
  #   readOnly: true

  service:
    # -- service types in kubernetes
    type: ClusterIP
    # -- Service annotations
    annotations: {}
    ports:
      scalardl:
        # -- scalardl target port
        port: 50051
        # -- scalardl k8s internal name
        targetPort: 50051
        # -- scalardl protocol
        protocol: TCP
      scalardl-priv:
        # -- scalardl-priv target port
        port: 50052
        # -- scalardl-priv k8s internal name
        targetPort: 50052
        # -- scalardl-priv protocol
        protocol: TCP
      scalardl-admin:
        # -- scalardl-admin target port
        port: 50053
        # -- scalardl-admin k8s internal name
        targetPort: 50053
        # -- scalardl-admin protocol
        protocol: TCP

  prometheusRule:
    # -- enable rules for prometheus
    enabled: false
    # -- which namespace prometheus is located. by default monitoring
    namespace: monitoring

  grafanaDashboard:
    # -- enable grafana dashboard
    enabled: false
    # -- which namespace grafana dashboard is located. by default monitoring
    namespace: monitoring

  serviceMonitor:
    # -- enable metrics collect with prometheus
    enabled: false
    # -- custom interval to retrieve the metrics
    interval: "15s"
    # -- which namespace prometheus is located. by default monitoring
    namespace: monitoring

  # -- resources allowed to the pod
  resources: {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  # -- nodeSelector is form of node selection constraint
  nodeSelector: {}

  # -- Tolerations are applied to pods, and allow (but do not require) the pods to schedule onto nodes with matching taints.
  tolerations: []

  # -- the affinity/anti-affinity feature, greatly expands the types of constraints you can express
  affinity: {}

  # -- Name of existing secret to use for storing database username and password
  existingSecret: ""

  serviceAccount:
    # -- Name of the existing service account resource
    serviceAccountName: ""
    # -- Specify to mount a service account token or not
    automountServiceAccountToken: false
