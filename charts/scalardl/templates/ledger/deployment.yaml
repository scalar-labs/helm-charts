apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "scalardl.fullname" . }}-ledger
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "scalardl-ledger.labels" . | nindent 4 }}
spec:
  minReadySeconds: 0
  replicas: {{ .Values.ledger.replicaCount }}
  selector:
    matchLabels:
      {{- include "scalardl-ledger.selectorLabels" . | nindent 6 }}
  {{- with .Values.ledger.strategy }}
  strategy:
    {{- toYaml . | nindent 4 }}
  {{- end }}
  template:
    metadata:
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/ledger/configmap.yaml") . | sha256sum }}
      labels:
        {{- include "scalardl-ledger.selectorLabels" . | nindent 8 }}
    spec:
      restartPolicy: Always
      {{- if .Values.ledger.serviceAccount.serviceAccountName }}
      serviceAccountName: {{ .Values.ledger.serviceAccount.serviceAccountName }}
      {{- end }}
      automountServiceAccountToken: {{ .Values.ledger.serviceAccount.automountServiceAccountToken }}
      terminationGracePeriodSeconds: 60
    {{- with .Values.ledger.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
    {{- end }}
      securityContext:
        {{- toYaml .Values.ledger.podSecurityContext | nindent 8 }}
      volumes:
      {{- if .Values.ledger.scalarLedgerConfiguration.ledgerProofEnabled }}
        - name: "{{ .Values.ledger.scalarLedgerConfiguration.secretName }}"
          secret:
            secretName: "{{ .Values.ledger.scalarLedgerConfiguration.secretName }}"
      {{- end }}
        - name: scalardl-ledger-properties-volume
          configMap:
            name: {{ include "scalardl.fullname" . }}-ledger-properties
      {{- if .Values.ledger.tls.caRootCertSecret }}
        - name: scalardl-ledger-tls-ca-root-volume
          secret:
            secretName: {{ .Values.ledger.tls.caRootCertSecret }}
      {{- end }}
      {{- if .Values.ledger.tls.certChainSecret }}
        - name: scalardl-ledger-tls-cert-chain-volume
          secret:
            secretName: {{ .Values.ledger.tls.certChainSecret }}
      {{- end }}
      {{- if .Values.ledger.tls.privateKeySecret }}
        - name: scalardl-ledger-tls-private-key-volume
          secret:
            secretName: {{ .Values.ledger.tls.privateKeySecret }}
      {{- end }}
      {{- with .Values.ledger.extraVolumes }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}-ledger
          securityContext:
            {{- toYaml .Values.ledger.securityContext | nindent 12 }}
          image: "{{ .Values.ledger.image.repository }}:{{ .Values.ledger.image.version }}"
          imagePullPolicy: {{ .Values.ledger.image.pullPolicy }}
          volumeMounts:
          {{- if .Values.ledger.scalarLedgerConfiguration.ledgerProofEnabled }}
            - name: "{{ .Values.ledger.scalarLedgerConfiguration.secretName }}"
              mountPath: "/keys"
              readOnly: true
          {{- end }}
            - name: scalardl-ledger-properties-volume
              mountPath: /scalar/ledger/ledger.properties
              subPath: ledger.properties
          {{- if .Values.ledger.tls.caRootCertSecret }}
            - name: scalardl-ledger-tls-ca-root-volume
              mountPath: /tls/certs/ca-root-cert.pem
              subPath: ca-root-cert
          {{- end }}
          {{- if .Values.ledger.tls.certChainSecret }}
            - name: scalardl-ledger-tls-cert-chain-volume
              mountPath: /tls/certs/cert-chain.pem
              subPath: cert-chain
          {{- end }}
          {{- if .Values.ledger.tls.privateKeySecret }}
            - name: scalardl-ledger-tls-private-key-volume
              mountPath: /tls/certs/private-key.pem
              subPath: private-key
          {{- end }}
          {{- with .Values.ledger.extraVolumeMounts }}
            {{- toYaml . | nindent 12 }}
          {{- end }}
          ports:
          - containerPort: 50051
          - containerPort: 50052
          - containerPort: 50053
          - containerPort: 8080
          env:
          - name: HELM_SCALAR_DB_CONTACT_POINTS
            value: "{{ .Values.ledger.scalarLedgerConfiguration.dbContactPoints }}"
          - name: HELM_SCALAR_DB_CONTACT_PORT
            value: "{{ .Values.ledger.scalarLedgerConfiguration.dbContactPort }}"
          - name: HELM_SCALAR_DB_USERNAME
            valueFrom:
              secretKeyRef:
              {{- if .Values.ledger.existingSecret }}
                name: {{ .Values.ledger.existingSecret }}
              {{- else }}
                name: {{ include "scalardl.fullname" . }}-ledger
              {{- end }}
                key: db-username
          - name: HELM_SCALAR_DB_PASSWORD
            valueFrom:
              secretKeyRef:
              {{- if .Values.ledger.existingSecret }}
                name: {{ .Values.ledger.existingSecret }}
              {{- else }}
                name: {{ include "scalardl.fullname" . }}-ledger
              {{- end }}
                key: db-password
          - name: HELM_SCALAR_DB_STORAGE
            value: "{{ .Values.ledger.scalarLedgerConfiguration.dbStorage }}"
          - name: SCALAR_DL_LEDGER_LOG_LEVEL
            value: "{{ .Values.ledger.scalarLedgerConfiguration.ledgerLogLevel }}"
          - name: HELM_SCALAR_DL_LEDGER_PROOF_ENABLED
            value: "{{ .Values.ledger.scalarLedgerConfiguration.ledgerProofEnabled }}"
          - name: HELM_SCALAR_DL_LEDGER_PROOF_PRIVATE_KEY_PATH
            value: "/keys/{{ .Values.ledger.scalarLedgerConfiguration.ledgerPrivateKeySecretKey }}"
          {{- if .Values.ledger.scalarLedgerConfiguration.ledgerAuditorEnabled }}
          - name: HELM_SCALAR_DL_LEDGER_AUDITOR_ENABLED
            value: "{{ .Values.ledger.scalarLedgerConfiguration.ledgerAuditorEnabled }}"
          {{- end }}
          {{- if .Values.ledger.secretName }}
          envFrom:
          - secretRef:
              name: "{{ .Values.ledger.secretName }}"
          {{- end }}
          startupProbe:
            exec:
              command:
              - /usr/local/bin/grpc_health_probe
              - -addr=:50051
              {{- if .Values.ledger.tls.enabled }}
              - -tls
              {{- if .Values.ledger.tls.caRootCertSecret }}
              - -tls-ca-cert=/tls/certs/ca-root-cert.pem
              {{- end }}
              - -tls-server-name={{ .Values.ledger.tls.overrideAuthority }}
              {{- end }}
            failureThreshold: 60
            periodSeconds: 5
          livenessProbe:
            exec:
              command:
              - /usr/local/bin/grpc_health_probe
              - -addr=:50051
              {{- if .Values.ledger.tls.enabled }}
              - -tls
              {{- if .Values.ledger.tls.caRootCertSecret }}
              - -tls-ca-cert=/tls/certs/ca-root-cert.pem
              {{- end }}
              - -tls-server-name={{ .Values.ledger.tls.overrideAuthority }}
              {{- end }}
            failureThreshold: 3
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            {{- toYaml .Values.ledger.resources | nindent 12 }}
      {{- with .Values.ledger.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    {{- with .Values.ledger.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.ledger.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
