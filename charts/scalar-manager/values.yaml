# Default values for scalar-manager.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

global:
  # -- Specify the platform that you use. This configuration is for internal use.
  platform: ""
  # -- Azure Marketplace specific configurations.
  azure:
    identity:
      # Application's Managed Service Identity (MSI) Client ID. ClientID can be used to generate authentication token to communicate to external services like Microsoft Marketplace Metering API.Azure populates this value at deployment time
      clientId: "DONOTMODIFY"
    marketplace:
      # id of the plan purchased for the Azure Marketplace Kubernetes application,to be used in usage event payload to metering api, for more information please refer: https://learn.microsoft.com/en-us/partner-center/marketplace/marketplace-metering-service-apis . Azure populates this value at deployment time. Azure populates this value at deployment time.
      planId: "DONOTMODIFY"
    extension:
      # resource id of the Azure Marketplace Kubernetes application,to be used in usage event payload to metering api, for more information please refer: https://learn.microsoft.com/en-us/partner-center/marketplace/marketplace-metering-service-apis .
      resourceId: "DONOTMODIFY"
    images:
      # -- Container image of Scalar Manager for Azure Marketplace.
      scalarManagerApi:
        tag: ""
        image: "scalar-manager-api-azure-payg"
        registry: "scalar.azurecr.io"
      scalarManagerWeb:
        tag: ""
        image: "scalar-manager-web-azure-payg"
        registry: "scalar.azurecr.io"

nameOverride: ""

fullnameOverride: ""

scalarManager:

  replicaCount: 1

  podAnnotations: {}

  podLabels: {}

  podSecurityContext:
    seccompProfile:
      type: RuntimeDefault

  securityContext:
    capabilities:
      drop:
        - ALL
    runAsNonRoot: true
    allowPrivilegeEscalation: false

  nodeSelector: {}

  tolerations: []

  # -- The affinity/anti-affinity feature, greatly expands the types of constraints you can express.
  affinity: {}

  serviceAccount:
    serviceAccountName: ""
    automountServiceAccountToken: true

  api:
    image:
      repository: ghcr.io/scalar-labs/scalar-manager-api
      pullPolicy: IfNotPresent
      # Overrides the image tag whose default is the chart appVersion.
      tag: ""

    resources:
      {}
      # We usually recommend not to specify default resources and to leave this as a conscious
      # choice for the user. This also increases chances charts run on environments with little
      # resources, such as Minikube. If you do want to specify resources, uncomment the following
      # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
      # limits:
      #   cpu: 100m
      #   memory: 128Mi
      # requests:
      #   cpu: 100m
      #   memory: 128Mi


    # -- The application.properties for Scalar Manager. If you want to customize application.properties, you can override this value with your application.properties.
    # @default -- The minimum template of application.properties is set by default.
    applicationProperties: |
      prometheus.kubernetes-service-label-name=${PROMETHEUS_KUBERNETES_SERVICE_LABEL_NAME:app.kubernetes.io/name}
      prometheus.kubernetes-service-label-value=${PROMETHEUS_KUBERNETES_SERVICE_LABEL_VALUE:prometheus}
      prometheus.kubernetes-service-port-name=${PROMETHEUS_KUBERNETES_SERVICE_PORT_NAME:http}

      # Swagger UI configuration
      springdoc.swagger-ui.enabled=${SPRINGDOC_SWAGGER_UI_ENABLED:false}
      springdoc.swagger-ui.path=${SPRINGDOC_SWAGGER_UI_PATH:/swagger-ui.html}

      # CORS configuration
      app.cors.allowed-origins=${APP_CORS_ALLOWED_ORIGINS:*}
      app.cors.allowed-methods=${APP_CORS_ALLOWED_METHODS:*}
      app.cors.allowed-headers=${APP_CORS_ALLOWED_HEADERS:*}

      # JWT configuration
      # Secret key used for signing JWT tokens, minimum 32 characters
      authentication.providers.static-jwt.secret=${AUTHENTICATION_PROVIDERS_STATIC_JWT_SECRET:example-jwt-secret-with-minimum-32-characters}
      authentication.providers.static-jwt.issuer-uri=${AUTHENTICATION_PROVIDERS_STATIC_JWT_ISSUER_URI:https://scalar-manager.example.com}
      authentication.providers.static-jwt.access-token-expiration-time=${AUTHENTICATION_PROVIDERS_STATIC_JWT_ACCESS_TOKEN_EXPIRATION_TIME:1h}
      authentication.providers.static-jwt.refresh-token-expiration-time=${AUTHENTICATION_PROVIDERS_STATIC_JWT_REFRESH_TOKEN_EXPIRATION_TIME:3d}

      # Initial admin configuration
      app.initial-admin-user.enabled=${APP_INITIAL_ADMIN_USER_ENABLED:true}
      app.initial-admin-user.email=${APP_INITIAL_ADMIN_USER_EMAIL:admin@example.com}
      app.initial-admin-user.name=${APP_INITIAL_ADMIN_USER_NAME:Administrator}
      app.initial-admin-user.password=${APP_INITIAL_ADMIN_USER_PASSWORD:Password@123!}

      # JPA configuration
      spring.jpa.hibernate.ddl-auto=${SPRING_JPA_HIBERNATE_DDL_AUTO:update}
      spring.jpa.show-sql=${SPRING_JPA_SHOW_SQL:false}
      spring.jpa.properties.hibernate.format_sql=${SPRING_JPA_PROPERTIES_HIBERNATE_FORMAT_SQL:false}

      # Database configuration
      spring.datasource.url=jdbc:postgresql://${DATABASE_HOST:scalar-manager-postgres-postgresql}:${DATABASE_PORT:5432}/${DATABASE_NAME:scalar-manager}
      spring.datasource.username=${DATABASE_USERNAME:scalar-manager}
      spring.datasource.password=${DATABASE_PASSWORD:scalar-manager}
      spring.datasource.driver-class-name=org.postgresql.Driver

      # ============================================
      # TLS Configuration
      # ============================================

      # Spring Boot SSL configuration will be inferred from our custom tls inbound configurations
      server.ssl.enabled=${app.tls.inbound.enabled}
      server.ssl.certificate=${app.tls.inbound.cert-path}
      server.ssl.certificate-private-key=${app.tls.inbound.private-key-path}
      # Include both ECDSA and RSA ciphers for maximum compatibility
      server.ssl.ciphers=TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_GCM_SHA256

      # Inbound TLS configuration (Server SSL/HTTPS)
      app.tls.inbound.enabled=${APP_TLS_INBOUND_ENABLED}
      # SSL certificate file (can contain full certificate chain)
      app.tls.inbound.cert-path=${APP_TLS_INBOUND_CERT_PATH}
      # SSL private key file (PKCS#8 format required for Spring Boot 3)
      app.tls.inbound.private-key-path=${APP_TLS_INBOUND_PRIVATE_KEY_PATH}

      # Outbound TLS configuration (Client connections to external services)
      # Prometheus service TLS configuration
      app.tls.outbound.prometheus.enabled=${APP_TLS_OUTBOUND_PROMETHEUS_ENABLED}
      app.tls.outbound.prometheus.ca-root-cert-path=${APP_TLS_OUTBOUND_PROMETHEUS_CA_ROOT_CERT_PATH}
      app.tls.outbound.prometheus.override-authority=${APP_TLS_OUTBOUND_PROMETHEUS_OVERRIDE_AUTHORITY}

      # ScalarDB TLS configuration
      app.tls.outbound.scalardb.enabled=${APP_TLS_OUTBOUND_SCALARDB_ENABLED}
      app.tls.outbound.scalardb.ca-root-cert-path=${APP_TLS_OUTBOUND_SCALARDB_CA_ROOT_CERT_PATH}
      app.tls.outbound.scalardb.override-authority=${APP_TLS_OUTBOUND_SCALARDB_OVERRIDE_AUTHORITY}

      # ScalarDL TLS configuration
      app.tls.outbound.scalardl.enabled=${APP_TLS_OUTBOUND_SCALARDL_ENABLED}
      app.tls.outbound.scalardl.ca-root-cert-path=${APP_TLS_OUTBOUND_SCALARDL_CA_ROOT_CERT_PATH}
      app.tls.outbound.scalardl.override-authority=${APP_TLS_OUTBOUND_SCALARDL_OVERRIDE_AUTHORITY}

  web:
    image:
      repository: ghcr.io/scalar-labs/scalar-manager-web
      pullPolicy: IfNotPresent
      # Overrides the image tag whose default is the chart appVersion.
      tag: ""

    service:
      type: ClusterIP
      ports:
        web:
          # Public port of Scalar Manager Web service.
          port: 13000
          # Internal port that Scalar Manager Web container listens.
          targetPort: 13000
          # Protocol that Scalar Manager Web service listens.
          protocol: TCP
      # -- Service annotations. For example, you can configure the Load Balancer provided by Cloud Service.
      annotations: {}

    # -- The environment variables for Scalar Manager web container. If you want to customize environment variables, you can override this value with your environment variables.
    env:
      # Currently, the GRAFANA_SERVER_URL is set to the Grafana service url installed in the monitoring namespace.
      - name: GRAFANA_SERVER_URL
        value: http://scalardb-cluster-monitoring-grafana:3000

    resources:
      {}
      # We usually recommend not to specify default resources and to leave this as a conscious
      # choice for the user. This also increases chances charts run on environments with little
      # resources, such as Minikube. If you do want to specify resources, uncomment the following
      # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
      # limits:
      #   cpu: 100m
      #   memory: 128Mi
      # requests:
      #   cpu: 100m
      #   memory: 128Mi


  imagePullSecrets: []

  # -- Unified TLS configuration for both API and Web components.
  tls:
    # -- Enable downstream TLS for Scalar Manager (applies to both API and Web components).
    downstream:
      # -- Enable downstream TLS (Web and API share the same certificate).
      enabled: false
      # -- Certificate configurations when cert-manager is not enabled.
      # -- Secret containing the certificate for downstream TLS.
      certChainSecret: ""
      # -- Secret containing the private key for downstream TLS.
      privateKeySecret: ""
      # -- Secret containing the CA root certificate for web-to-API communication (Web needs to validate API's TLS certificate).
      caRootCertSecret: ""

    # -- Upstream TLS configuration for external service connections.
    upstream:
      # -- Prometheus TLS configuration.
      prometheus:
        # -- Enable TLS for Prometheus connections.
        enabled: false
        # -- Secret containing the CA root certificate for validating Prometheus SSL certificates.
        caRootCertSecret: ""
        # -- Override the hostname for TLS SNI when connecting to Prometheus.
        overrideAuthority: ""

      # -- ScalarDB TLS configuration.
      scalardb:
        # -- Enable TLS for ScalarDB connections.
        enabled: false
        # -- Secret containing the CA root certificate for validating ScalarDB SSL certificates.
        caRootCertSecret: ""
        # -- Override the hostname for TLS SNI when connecting to ScalarDB.
        overrideAuthority: ""

      # -- ScalarDL TLS configuration.
      scalardl:
        # -- Enable TLS for ScalarDL connections.
        enabled: false
        # -- Secret containing the CA root certificate for validating ScalarDL SSL certificates.
        caRootCertSecret: ""
        # -- Override the hostname for TLS SNI when connecting to ScalarDL.
        overrideAuthority: ""

      # -- Grafana TLS configuration.
      grafana:
        # -- Enable TLS for Grafana proxy connections.
        enabled: false
        # -- Secret containing the CA root certificate for validating Grafana SSL certificates.
        caRootCertSecret: ""
        # -- Override the hostname for TLS SNI when connecting to Grafana.
        overrideAuthority: ""

    # -- Cert-manager integration for automatic certificate management.
    certManager:
      # -- Enable cert-manager integration.
      enabled: false
      # -- Duration of the certificate.
      duration: 8760h0m0s
      # -- How long before expiry the certificate should be renewed.
      renewBefore: 360h0m0s
      # -- Private key configurations.
      privateKey:
        algorithm: RSA
        encoding: PKCS8
        size: 2048
      # -- Usages for the certificate.
      usages:
        - server auth
        - key encipherment
        - signing
      # -- DNS names for the certificate.
      dnsNames:
        - localhost
        - scalar-manager
      # -- Reference to the issuer for the certificate.
      issuerRef: {}
      # -- Use a self-signed certificate.
      selfSigned:
        enabled: false
        # -- Type of self-signed issuer (ca or selfSigned).
        type: ca
