# Default values for scalardb.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# replicaCount -- Default values for number of replicas.
replicaCount: 1
# nameOverride -- String to partially override scalardl.fullname template (will maintain the release name)
nameOverride: ""
# fullnameOverride -- String to fully override scalardl.fullname template
fullnameOverride: ""

scalardb:
  # scalardb.contactPoints -- The database contanct point such as a hostname of Cassandra or a URL of Cosmos DB account.
  contactPoints: cassandra
  # scalardb.contactPort -- The database port number.
  contactPort: 9042
  # scalardb.username -- The username of the database. For Cosmos DB please leave blank. For Dynamo DB please specify key id here.
  username: cassandra
  # scalardb.password -- The password of the database. For Cosmos DB, Dynamo DB please specify a secret key here.
  password: cassandra
  # scalardb.storge -- Storage implementation. Either cassandra or cosmos or dynamo or jdbc can be set.
  storge: cassandra

  serverCfg:
    # scalardb.serverCfg.port -- The port of Scalar DB server.
    port: 60051
    # scalardb.serverCfg.prometheus_http_endpoint_port -- The port of Prometheus service runnning in Scalar DB server.
    prometheus_http_endpoint_port: 8080

  image:
    # scalardb.image.repository -- Docker image reposiory of Scalar DB server.
    repository: ghcr.io/scalar-labs/scalardb-server
    # scalardb.image.imagePullPolicy Specify a image pulling policy.
    pullPolicy: IfNotPresent
    # scalardb.image.tag -- Docker tag of the image.
    tag: 3.1.0

  # scalardb.imagePullSecrets -- Optionally specify an array of imagePullSecrets. Secrets must be manually created in the namespace.
  imagePullSecrets: []

service:
  # service.type -- service types in kubernetes.
  type: LoadBalancer
  ports:
    scalardb-server:
      # service.ports.scalardb-server.port -- Scalar DB server port.
      port: 60051
      # service.ports.scalardb-server.targetPort -- Scalar DB server target port.
      targetPort: 60051
      # service.ports.scalardb-server.protocol -- Scalar DB server protocol.
      protocol: TCP
    scalardb-server-prometheus:
      # service.ports.scalardb-server-prometheus.port -- Prometheus of Scalar DB server port.
      port: 8080
      # service.ports.scalardb-server-prometheus.port -- Prometheus of Scalar DB server target port.
      targetPort: 8080
      # service.ports.scalardb-server-prometheus.port -- Prometheus of Scalar DB server protocol.
      protocol: TCP


# podSecurityContext -- PodSecurityContext holds pod-level security attributes and common container settings.
podSecurityContext: {}
  # fsGroup: 2000

# securityContext -- Setting security context at the pod applies those settings to all containers in the pod.
securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

# resources -- Resources allowed to the pod.
resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

# nodeSelector -- nodeSelector is form of node selection constraint.
nodeSelector: {}

# tolerations -- Tolerations are applied to pods, and allow (but do not require) the pods to schedule onto nodes with matching taints.
tolerations: []

# affinity -- The affinity/anti-affinity feature, greatly expands the types of constraints you can express.
affinity: {}

# existingSecret -- Name of existing secret to use for storing database username and password.
existingSecret: null
