# Default values for scalardb.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# -- String to partially override scalardb.fullname template (will maintain the release name)
nameOverride: ""
# -- String to fully override scalardb.fullname template
fullnameOverride: ""

envoy:
  # -- enable envoy
  enabled: true
  # -- String to partially override envoy.fullname template
  nameOverride: scalardb

  envoyConfiguration:
    # -- list of service name and port
    serviceListeners: scalardb-service:60051

  image:
    # -- Docker tag
    version: 1.3.0

  service:
    # -- service types in kubernetes
    type: ClusterIP
    # -- Service annotations, e.g: prometheus, etc.
    annotations: {}
    ports:
      envoy:
        # -- envoy public port
        port: 60051
        # -- envoy k8s internal name
        targetPort: 60051
        # -- envoy protocol
        protocol: TCP

scalardb:
  # -- Default values for number of replicas.
  replicaCount: 3

  storageConfiguration:
    # -- The database contanct point such as a hostname of Cassandra or a URL of Cosmos DB account.
    contactPoints: cassandra
    # -- The database port number.
    contactPort: 9042
    # -- The username of the database. For Cosmos DB please leave blank. For Dynamo DB please specify key id here.
    username: cassandra
    # -- The password of the database. For Cosmos DB, Dynamo DB please specify a secret key here.
    password: cassandra
    # -- Storage implementation. Either cassandra or cosmos or dynamo or jdbc can be set.
    storage: cassandra
    # -- The log level of ScalarDB
    dbLogLevel: INFO

  # -- The database.properties is created based on the values of scalardb.storageConfiguration by default. If you want to customize database.properties, you can override this value with your database.properties.
  # @default -- The minimum template of database.properties is set by default.
  databaseProperties: |
    # Comma separated contact points. For DynamoDB, the region is specified by this parameter.
    # The value of scalardb.storageConfiguration.contactPoints is set by default.
    scalar.db.contact_points={{ default .Env.HELM_SCALAR_DB_CONTACT_POINTS "" }}

    # Port number for all the contact points. Default port number for each database is used if empty.
    # The value of scalardb.storageConfiguration.contactPort is set by default.
    scalar.db.contact_port={{ default .Env.HELM_SCALAR_DB_CONTACT_PORT "" }}

    # Credential information to access the database. For Cosmos DB, username isn't used. For DynamoDB, AWS_ACCESS_KEY_ID is specified by the username and AWS_ACCESS_SECRET_KEY is specified by the password.
    # The value of scalardb.storageConfiguration.username is set by default.
    scalar.db.username={{ default .Env.HELM_SCALAR_DB_USERNAME "" }}
    # The value of scalardb.storageConfiguration.password is set by default.
    scalar.db.password={{ default .Env.HELM_SCALAR_DB_PASSWORD "" }}

    # Storage implementation. "cassandra" or "cosmos" or "dynamo" or "jdbc" or "grpc" can be set. Default storage is "cassandra".
    # The value of scalardb.storageConfiguration.storage is set by default.
    scalar.db.storage={{ default .Env.HELM_SCALAR_DB_STORAGE "" }}

  # -- Secret name that includes sensitive data such as credentials. Each secret key is passed to Pod as environment variables using envFrom.
  secretName: ""

  image:
    # -- Docker image reposiory of ScalarDB server.
    repository: ghcr.io/scalar-labs/scalardb-server
    # -- Specify a image pulling policy.
    pullPolicy: IfNotPresent
    # -- Docker tag of the image.
    tag: 3.8.0

  # -- Optionally specify an array of imagePullSecrets. Secrets must be manually created in the namespace.
  imagePullSecrets: []

  strategy:
    rollingUpdate:
      # -- The number of pods that can be created above the desired amount of pods during an update
      maxSurge: 25%
      # -- The number of pods that can be unavailable during the update process
      maxUnavailable: 25%
    # -- New pods are added gradually, and old pods are terminated gradually, e.g: Recreate or RollingUpdate
    type: RollingUpdate

  service:
    # -- service types in kubernetes.
    type: ClusterIP
    ports:
      scalardb:
        # -- ScalarDB server port.
        port: 60051
        # -- ScalarDB server target port.
        targetPort: 60051
        # -- ScalarDB server protocol.
        protocol: TCP

  rbac:
    # -- If true, create and use RBAC resources
    create: true
    # -- Annotations for the Service Account
    serviceAccountAnnotations: {}

  podSecurityPolicy:
    # -- Enable pod security policy
    enabled: false

  serviceMonitor:
    # -- Enable metrics collect with prometheus.
    enabled: false
    # -- Custom interval to retrieve the metrics.
    interval: "15s"
    # -- Which namespace prometheus is located. by default monitoring.
    namespace: monitoring

  prometheusRule:
    # -- Enable rules for prometheus.
    enabled: false
    # -- Which namespace prometheus is located. by default monitoring.
    namespace: monitoring

  grafanaDashboard:
    # -- Enable grafana dashboard.
    enabled: false
    # -- Which namespace grafana dashboard is located. by default monitoring.
    namespace: monitoring

  # -- PodSecurityContext holds pod-level security attributes and common container settings.
  podSecurityContext:
    seccompProfile:
      type: RuntimeDefault

  # -- Setting security context at the pod applies those settings to all containers in the pod.
  securityContext:
    # -- Capabilities (specifically, Linux capabilities), are used for permission management in Linux. Some capabilities are enabled by default
    capabilities:
      drop:
        - ALL
    # -- Containers should be run as a non-root user with the minimum required permissions (principle of least privilege)
    runAsNonRoot: true
    # -- AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process
    allowPrivilegeEscalation: false

  # -- Pod annotations for the scalardb deployment
  podAnnotations: {}

  # -- Resources allowed to the pod.
  resources:
    {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  # -- nodeSelector is form of node selection constraint.
  nodeSelector: {}

  # -- Tolerations are applied to pods, and allow (but do not require) the pods to schedule onto nodes with matching taints.
  tolerations: []

  # -- The affinity/anti-affinity feature, greatly expands the types of constraints you can express.
  affinity: {}

  # -- Name of existing secret to use for storing database username and password.
  existingSecret: ""

  # -- Defines additional volumes.
  # If you want to get a heap dump of the ScalarDB Cluster node, you need to mount a volume to make the dump file persistent.
  extraVolumes: []
  # - name: heap-dump
  #   emptyDir: {}

  # -- Defines additional volume mounts.
  # If you want to get a heap dump of the ScalarDB Cluster node, you need to mount a volume to make the dump file persistent.
  extraVolumeMounts: []
  # - name: heap-dump
  #   mountPath: /dump
