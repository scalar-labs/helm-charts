# Default values for scalardb.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# nameOverride -- String to partially override scalardb.fullname template (will maintain the release name)
nameOverride: ""
# fullnameOverride -- String to fully override scalardb.fullname template
fullnameOverride: ""

envoy:
  # envoy.replicaCount -- number of replicas to deploy
  replicaCount: 3

  envoyConfiguration:
    # envoy.envoyConfiguration.adminAccessLogPath -- admin log path
    adminAccessLogPath: /dev/stdout

  image:
    # envoy.image.repository -- Docker image
    repository: ghcr.io/scalar-labs/scalar-envoy
    # envoy.image.tag -- Docker tag
    version: 1.1.0
    # envoy.image.pullPolicy -- Specify a imagePullPolicy
    pullPolicy: IfNotPresent

  # envoy.imagePullSecrets -- Optionally specify an array of imagePullSecrets. Secrets must be manually created in the namespace.
  imagePullSecrets: []

  strategy:
    rollingUpdate:
      # envoy.strategy.rollingUpdate -- The number of pods that can be created above the desired amount of pods during an update
      maxSurge: 25%
      # envoy.strategy.rollingUpdate -- The number of pods that can be unavailable during the update process
      maxUnavailable: 25%
    # envoy.strategy.type -- New pods are added gradually, and old pods are terminated gradually, e.g: Recreate or RollingUpdate
    type: RollingUpdate

  # envoy.podSecurityContext -- PodSecurityContext holds pod-level security attributes and common container settings
  podSecurityContext: {}
    # fsGroup: 2000

  # envoy.securityContext -- Setting security context at the pod applies those settings to all containers in the pod
  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000
  service:
    # envoy.service.type -- service types in kubernetes
    type: ClusterIP
    # envoy.service.annotations -- Service annotations, e.g: prometheus, etc.
    annotations: {}
    ports:
      envoy:
        # envoy.service.ports.envoy.port -- envoy public port
        port: 60051
        # envoy.service.ports.envoy.targetPort -- envoy k8s internal name
        targetPort: 50051
        # envoy.service.ports.envoy.protocol -- envoy protocol
        protocol: TCP

  serviceMonitor:
    # envoy.serviceMonitor.enabled -- enable metrics collect with prometheus
    enabled: false
    # envoy.serviceMonitor.interval -- custom interval to retrieve the metrics
    interval: "15s"
    # envoy.serviceMonitor.namespace -- which namespace prometheus is located. by default monitoring
    namespace: monitoring

  prometheusRule:
    # envoy.prometheusRule.enabled -- enable rules for prometheus
    enabled: false
    # envoy.prometheusRule.namespace -- which namespace prometheus is located. by default monitoring
    namespace: monitoring

  grafanaDashboard:
    # ledger.grafanaDashboard.enabled -- enable grafana dashboard
    enabled: false
    # ledger.grafanaDashboard.namespace -- which namespace grafana dashboard is located. by default monitoring
    namespace: monitoring

  # envoy.resources -- resources allowed to the pod
  resources: {}
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  # envoy.nodeSelector -- nodeSelector is form of node selection constraint
  nodeSelector: {}

  # envoy.tolerations -- Tolerations are applied to pods, and allow (but do not require) the pods to schedule onto nodes with matching taints.
  tolerations: []

  # envoy.affinity -- the affinity/anti-affinity feature, greatly expands the types of constraints you can express
  affinity: {}

scalardb:
  # scalardb.replicaCount -- Default values for number of replicas.
  replicaCount: 3

  storageConfiguration:
    # scalardb.storageConfiguration.contactPoints -- The database contanct point such as a hostname of Cassandra or a URL of Cosmos DB account.
    contactPoints: cassandra
    # scalardb.storageConfiguration.contactPort -- The database port number.
    contactPort: 9042
    # scalardb.storageConfiguration.username -- The username of the database. For Cosmos DB please leave blank. For Dynamo DB please specify key id here.
    username: cassandra
    # scalardb.storageConfiguration.password -- The password of the database. For Cosmos DB, Dynamo DB please specify a secret key here.
    password: cassandra
    # scalardb.storageConfiguration.storage -- Storage implementation. Either cassandra or cosmos or dynamo or jdbc can be set.
    storage: cassandra
    # scalardb.storageConfiguration.dbLogLevel -- The log level of Scalar DB
    dbLogLevel: INFO

  image:
    # scalardb.image.repository -- Docker image reposiory of Scalar DB server.
    repository: ghcr.io/scalar-labs/scalardb-server
    # scalardb.image.pullPolicy Specify a image pulling policy.
    pullPolicy: IfNotPresent
    # scalardb.image.tag -- Docker tag of the image.
    tag: 3.1.0

  # scalardb.imagePullSecrets -- Optionally specify an array of imagePullSecrets. Secrets must be manually created in the namespace.
  imagePullSecrets: []

  strategy:
    rollingUpdate:
      # scalardb.strategy.rollingUpdate -- The number of pods that can be created above the desired amount of pods during an update
      maxSurge: 25%
      # scalardb.strategy.rollingUpdate -- The number of pods that can be unavailable during the update process
      maxUnavailable: 25%
    # scalardb.strategy.type -- New pods are added gradually, and old pods are terminated gradually, e.g: Recreate or RollingUpdate
    type: RollingUpdate

  service:
    # scalardb.service.type -- service types in kubernetes.
    type: ClusterIP
    ports:
      scalardb:
        # scalardb.service.ports.scalardb.port -- Scalar DB server port.
        port: 50051
        # scalardb.service.ports.scalardb.targetPort -- Scalar DB server target port.
        targetPort: 50051
        # scalardb.service.ports.scalardb.protocol -- Scalar DB server protocol.
        protocol: TCP

  serviceMonitor:
    # scalardb.serviceMonitor.enabled -- Enable metrics collect with prometheus.
    enabled: false
    # scalardb.serviceMonitor.interval -- Custom interval to retrieve the metrics.
    interval: "15s"
    # scalardb.serviceMonitor.namespace -- Which namespace prometheus is located. by default monitoring.
    namespace: monitoring

  prometheusRule:
    # scalardb.prometheusRule.enabled -- Enable rules for prometheus.
    enabled: false
    # scalardb.prometheusRule.namespace -- Which namespace prometheus is located. by default monitoring.
    namespace: monitoring

  grafanaDashboard:
    # scalardb.grafanaDashboard.enabled -- Enable grafana dashboard.
    enabled: false
    # scalardb.grafanaDashboard.namespace -- Which namespace grafana dashboard is located. by default monitoring.
    namespace: monitoring

  # scalardb.podSecurityContext -- PodSecurityContext holds pod-level security attributes and common container settings.
  podSecurityContext:
    {}
    # fsGroup: 2000

  # scalardb.securityContext -- Setting security context at the pod applies those settings to all containers in the pod.
  securityContext:
    {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  # scalardb.resources -- Resources allowed to the pod.
  resources:
    {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  # scalardb.nodeSelector -- nodeSelector is form of node selection constraint.
  nodeSelector: {}

  # scalardb.tolerations -- Tolerations are applied to pods, and allow (but do not require) the pods to schedule onto nodes with matching taints.
  tolerations: []

  # scalardb.affinity -- The affinity/anti-affinity feature, greatly expands the types of constraints you can express.
  affinity: {}

  # scalardb.existingSecret -- Name of existing secret to use for storing database username and password.
  existingSecret: null
